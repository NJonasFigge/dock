
name: dock


networks:
  papsite-live-net:  # Connects reverse-proxy with papsite-live
    name: papsite-live-net
    driver: bridge

  papsite-stage-net:  # Connects reverse-proxy with papsite-stage
    name: papsite-stage-net
    driver: bridge

  papsite-devtest-net:  # Connects reverse-proxy with papsite-devtest
    name: papsite-devtest-net
    driver: bridge

  fileserver-net:  # Connects reverse-proxy with fileserver
    name: fileserver-net
    driver: bridge

  ai-net:  # Connects alpacabot with ai-server
    name: ai-net
    driver: bridge


services:
  # ################################################ MY BASE IMAGES ####################################################

  # === The "My Climate" base image ===
  # - This image is the basis for all other images. It installs some basic packages and does some initial setup that
  #   makes me feel well.
  myclimate-base:
    # --- For build-time ---
    image: my-climate  # Name the built image
    build:
      context: ./_base/my-climate  # Build in here, also use this Dockerfile


  # === The "My Webserver" base image ===
  # - This image is the basis for all webserver images. It installs and configures a webserver (nginx + cgiwrap)
  mywebserver-base:
    # --- Static definitions ---
    depends_on:  # Images to build before this
      - myclimate-base  # This image is based on the myclimate-base image

    # --- For build-time ---
    image: my-webserver  # Name the built image
    build:
      context: ./_base/my-webserver  # Build in here, also use this Dockerfile


  # === The "Papsite" base image ===
  # - This image is the basis for all papsite images. It installs and configures everything needed to run a papsite.
  papsite-base:
    # --- Static definitions ---
    depends_on:  # Images to build before this
      - mywebserver-base  # This image is based on the mywebserver-base image

    # --- For build-time ---
    image: papsite-base  # Name the built image
    build:
      context: ./_base/papsite-base  # Build in here, also use this Dockerfile



  # ############################################### REVERSE PROXY ######################################################

  # === THE REVERSE PROXY SERVICE ===
  # - This container's main task is to take requests from the www and serve the correct content. It does not include
  #   any servable contents itself, but retrieves them from the other containers.
  reverse-proxy:
    # --- Static definitions ---
    depends_on:  # Images to build before this
      - mywebserver-base  # This image is based on the mywebserver-base image
    # restart: always

    # --- For build-time ---
    build:
      context: ./reverse-proxy  # Build in here, also use this Dockerfile
      args:
        PROMPTHUE: 0  # Prompt color hue (0-360), 0 = red

    # --- For runtime ---
    container_name: reverse-proxy
    hostname: reverse-proxy  # "Computer name" from within container
    networks:
      - papsite-live-net
      - papsite-stage-net
      - papsite-devtest-net
      - fileserver-net
    ports:  # Exposed container ports (mapping "<actual_server_port>:<container_port>")
      - "80:80"    # HTTP
      - "443:443"  # HTTPS



  # ################################################### PAPSITES #######################################################

  # === THE LIVE PAPSITE ===
  # - This container will clone the papsite repo's latest version branch, render the contents, deploy them to a certain
  #   directory and serve that directory to the reverse proxy.
  papsite-live:
    # --- Static definitions ---
    depends_on:  # Images to build before this
      - papsite-base  # This image is based on the papsite-base image

    # --- For build-time ---
    build:
      context: ./papsite  # Build in here, also use this Dockerfile
      args:  # Build arguments that steer the build process
        ACCESS: www  # No password required
        FIXEDBRANCH: latest  # Always only use the latest version branch
        PROMPTHUE: 35  # Prompt color hue (0-360), 35 = orange

    # --- For runtime ---
    container_name: papsite-live
    hostname: papsite-live  # "Computer name" from within container
    networks:
      - papsite-live-net
    expose: # Won't publish ports to the host machine, only between services
      - "80"   # HTTP
      - "443"  # HTTPS
    volumes:
      - ./papsite/venvs/live-venv:/app/venv  # Pre-supply a virtualenv (that might be updated by the container)
      - ./dot-ssh:/root/.ssh:ro  # - For fetching git repos via SSH
    environment:  # Environment variables that are only necessary when running
      IS_LIVE: true  # Activates live mode


  # === THE STAGED PAPSITE ===
  # - This container will clone the papsite repo's main branch, render the contents, deploy them to a certain
  #   directory and serve that directory to the reverse proxy.
  papsite-stage:
    # --- Static definitions ---
    depends_on:  # Images to build before this
      - papsite-base  # This image is based on the papsite-base image

    # --- For build-time ---
    build:
      context: ./papsite  # Build in here, also use this Dockerfile
      args:  # Build arguments that steer the build process
        ACCESS: devs, testers  # Access granted to users in these htpasswd-files
        FIXEDBRANCH: main  # Always only use main branch
        PROMPTHUE: 55  # Prompt color hue (0-360), 55 = yellow

    # --- For runtime ---
    container_name: papsite-stage
    hostname: papsite-stage  # "Computer name" from within container
    networks:
      - papsite-stage-net
    expose: # Won't publish ports to the host machine, only between services
      - "80"   # HTTP
      - "443"  # HTTPS
    volumes:
      - ./papsite/venvs/stage-venv:/app/venv  # Pre-supply a virtualenv (that might be updated by the container)
      - ./dot-ssh:/root/.ssh:ro  # - For fetching git repos via SSH


  # === THE DEVTEST PAPSITE ===
  # - This container will clone an arbitrary branch of the papsite repo, render the contents, deploy them to a certain
  #   directory and serve that directory to the reverse proxy.
  papsite-devtest:
    # --- Static definitions ---
    depends_on:  # Images to build before this
      - papsite-base  # This image is based on the papsite-base image

    # --- For build-time ---
    build:
      context: ./papsite  # Build in here, also use this Dockerfile
      args:  # Build arguments that steer the build process
        ACCESS: devs  # Access granted to users in these htpasswd-files
        CGI_SCRIPTS: deploy.cgi
        PROMPTHUE: 75  # Prompt color hue (0-360), 75 = neon green

    # --- For runtime ---
    container_name: papsite-devtest
    hostname: papsite-devtest  # "Computer name" from within container
    networks:
      - papsite-devtest-net
    expose: # Won't publish ports to the host machine, only between services
      - "80"   # HTTP
      - "443"  # HTTPS
    volumes:
      - ./papsite/venvs/devtest-venv:/app/venv  # Pre-supply a virtualenv (that might be updated by the container)
      - ./dot-ssh:/root/.ssh:ro  # - For fetching git repos via SSH
    environment:  # Environment variables that are only necessary when running
      BRANCH: nginx



  # ############################################### BACKEND SERVERS ####################################################

  # === THE FILESERVER ===
  # - This container will serve the family storage via WedDAV.
  fileserver:
    # --- Static definitions ---
    depends_on:  # Images to build before this
      - mywebserver-base  # This image is based on the mywebserver-base image
    # restart: always

    # --- For build-time ---
    build:
      context: ./fileserver
      args:
        PROMPTHUE: 110  # Prompt color hue (0-360), 110 = green

    # --- For runtime ---
    container_name: fileserver
    hostname: fileserver  # "Computer name" from within container
    networks:
      - fileserver-net
    expose:  # Won't publish ports to the host machine, only between services
      - "80"   # HTTP


  # === THE AI-SERVER ===
  # - This container will run an LLM service.
  ai-server:
    # --- Static definitions ---
    depends_on:  # Images to build before this
      - myclimate-base  # This image is based on the myclimate-base image
    # restart: always

    # --- For build-time ---
    build:
      context: ./ai-server  # Build in here, also use this Dockerfile
      args:
        PROMPTHUE: 150  # Prompt color hue (0-360), 150 = turquoise

    # --- For runtime ---
    container_name: ai-server
    hostname: ai-server  # "Computer name" from within container
    networks:
      - ai-net
    expose:  # Won't publish ports to the host machine, only between services
      - "8000"  # The port the service listens on
    # volumes:
    #   - ./ai-server/models:/models  # Volume for the models
    # environment:  # Environment variables that are only necessary when running
    #   MODEL_PATH: /models/ggml-model-q4_0.bin  # Path to the model to be used



  # ############################################### TELEGRAM BOTS ######################################################

  # === The Zettelbot ===
  # - This container will clone and run the main branch of the zettelbot repo.
  zettelbot:
    # --- Static definitions ---
    depends_on:  # Images to build before this
      - myclimate-base  # This image is based on the myclimate-base image
    # restart: always

    # --- For build-time ---
    build:
      context: ./telegram-bot  # Build in here, also use this Dockerfile
      args:
        PROMPTHUE: 200  # Prompt color hue (0-360), 200 = light blue

    # --- For runtime ---
    container_name: zettelbot
    hostname: zettelbot  # "Computer name" from within container
    volumes:
      - ./telegram-bot/venvs/zettelbot-venv:/app/venv  # Pre-supply a virtualenv (that might be updated by the container)
      - ./dot-ssh:/root/.ssh:ro  # - For fetching git repos via SSH
    environment:  # Environment variables that are only necessary when running
      REPO: "git@github.com:NJonasFigge/Zettelbot.git"


  # === The SchaluppenBot ===
  # - This container will clone and run the main branch of the zettelbot repo.
  schaluppenbot:
    # --- Static definitions ---
    depends_on:  # Images to build before this
      - myclimate-base  # This image is based on the myclimate-base image
    # restart: always

    # --- For build-time ---
    build:
      context: ./telegram-bot  # Build in here, also use this Dockerfile
      args:
        PROMPTHUE: 210  # Prompt color hue (0-360), 210 = blue

    # --- For runtime ---
    container_name: schaluppenbot
    hostname: schaluppenbot  # "Computer name" from within container
    volumes:
      - ./telegram-bot/venvs/schaluppenbot-venv:/app/venv  # Pre-supply a virtualenv (that might be updated by the container)
      - ./dot-ssh:/root/.ssh:ro  # - For fetching git repos via SSH
    environment:  # Environment variables that are only necessary when running
      REPO: "git@github.com:NJonasFigge/SchaluppenBot.git"


  # === The AlpacaBot ===
  # - This container will clone and run the main branch of the zettelbot repo.
  alpacabot:
    # --- Static definitions ---
    depends_on:  # Images to build before this
      - myclimate-base  # This image is based on the myclimate-base image
    # restart: always

    # --- For build-time ---
    build:
      context: ./telegram-bot  # Build in here, also use this Dockerfile
      args:
        PROMPTHUE: 230  # Prompt color hue (0-360), 230 = dark blue

    # --- For runtime ---
    container_name: alpacabot
    hostname: alpacabot  # "Computer name" from within container
    networks:
      - ai-net
    volumes:
      - ./telegram-bot/venvs/alpacabot-venv:/app/venv  # Pre-supply a virtualenv (that might be updated by the container)
      - ./dot-ssh:/root/.ssh:ro  # - For fetching git repos via SSH
    environment:  # Environment variables that are only necessary when running
      REPO: "git@github.com:NJonasFigge/AlpacaBot.git"


  # === The EheBoostBot ===
  # - This container will clone and run the main branch of the zettelbot repo.
  eheboostbot:
    # --- Static definitions ---
    depends_on:  # Images to build before this
      - myclimate-base  # This image is based on the myclimate-base image
    # restart: always

    # --- For build-time ---
    build:
      context: ./telegram-bot  # Build in here, also use this Dockerfile
      args:
        PROMPTHUE: 245  # Prompt color hue (0-360), 245 = lilac

    # --- For runtime ---
    container_name: eheboostbot
    hostname: eheboostbot  # "Computer name" from within container
    volumes:
      - ./telegram-bot/venvs/eheboostbot-venv:/app/venv  # Pre-supply a virtualenv (that might be updated by the container)
      - ./dot-ssh:/root/.ssh:ro  # - For fetching git repos via SSH
    environment:  # Environment variables that are only necessary when running
      REPO: "git@github.com:NJonasFigge/EheBoostBot.git"
